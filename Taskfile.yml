version: '3'

vars:
  BACKEND_DIR: api/app
  FRONTEND_DIR: web

tasks:
  default:
    desc: List available tasks
    cmds:
      - task -l
    silent: true

  proto:
    desc: Generate protobuf code
    dir: proto
    cmds:
      - buf generate

  api:
    desc: Run Spring Boot backend
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - mvn spring-boot:run

  web:
    desc: Run Next.js frontend
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - pnpm install
      - pnpm run dev

  docker:
    desc: Build images and run with Docker Compose (full stack)
    cmds:
      - docker compose --profile full up --build -d
      - tmux kill-session -t docker-logs || echo "No tmux session to kill"
      - tmux new-session -d -s docker-logs 'docker compose logs -f' \; split-window -h \; select-pane -t 1 \; attach
  
  docker-dev:
    desc: Run only infrastructure services (postgres, jaeger, otel-collector)
    cmds:
      - docker compose --profile dev up -d
      - tmux kill-session -t docker-logs || echo "No tmux session to kill"
      - tmux new-session -d -s docker-logs 'docker compose logs -f' \; split-window -h \; select-pane -t 1 \; attach
  
  docker-full:
    desc: Build and run full stack including api and web
    cmds:
      - docker compose --profile full up --build -d
      - tmux kill-session -t docker-logs || echo "No tmux session to kill"
      - tmux new-session -d -s docker-logs 'docker compose logs -f' \; split-window -h \; select-pane -t 1 \; attach
  
  docker-logs:
    desc: View Docker Compose logs (live)
    cmds:
      - docker compose logs -f
  
  docker-stop:
    desc: Stop all Docker Compose services
    cmds:
      - docker compose down -v
  
  tmux-exit:
    desc: Exit tmux session and return to terminal
    cmds:
      - tmux kill-session -t docker-logs || echo "No tmux session to kill"

  k8s:
    desc: Apply Kubernetes manifests
    cmds:
      - kubectl apply -f k8s/api-deployment.yaml
      - kubectl apply -f k8s/web-deployment.yaml

  db-start:
    desc: Start PostgreSQL database container
    cmds:
      - ./scripts/start-db.sh

  db-stop:
    desc: Stop PostgreSQL database container
    cmds:
      - ./scripts/stop-db.sh

  db-migrate:
    desc: Run database migrations
    cmds:
      - ./scripts/run-migrations.sh

  test-setup:
    desc: Setup test data for Cypress tests
    cmds:
      - chmod +x scripts/setup-test-data.sh
      - ./scripts/setup-test-data.sh

  db-clean:
    desc: Stop database and remove volume
    cmds:
      - docker stop utro-postgres || true
      - docker rm utro-postgres || true
      - docker volume rm utro_postgres_data || true

  lint:
    desc: Run linting for both backend and frontend
    cmds:
      - task: lint:api
      - task: lint:web

  lint-api:
    desc: Run Java linting with Checkstyle and SpotBugs
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - mvn checkstyle:check
      - mvn spotbugs:check

  lint-web:
    desc: Run ESLint and Prettier for frontend
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - pnpm run lint
      - pnpm run format:check
      - pnpm run typecheck

  typecheck:
    desc: Run TypeScript type checking
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - pnpm run typecheck

  format:
    desc: Auto-fix formatting for frontend
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - pnpm run lint:fix
      - pnpm run format

  test:
    desc: Run tests for both backend and frontend
    cmds:
      - task: test:api
      - task: test:web

  test-api:
    desc: Run backend tests
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - mvn test

  test-web:
    desc: Run frontend tests
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - pnpm test

  observability-start:
    desc: Start observability stack (Jaeger, OTel Collector)
    cmds:
      - docker compose up jaeger otel-collector -d

  observability-stop:
    desc: Stop observability stack
    cmds:
      - docker compose stop jaeger otel-collector
      - docker compose rm -f jaeger otel-collector

  traces:
    desc: Open Jaeger UI for trace visualization
    cmds:
      - echo "Opening Jaeger UI at http://localhost:16686"
      - open http://localhost:16686 || xdg-open http://localhost:16686 || echo "Please open http://localhost:16686 in your browser"

  docker-observability:
    desc: Build and run full stack with observability
    cmds:
      - docker compose up --build

  # API Testing with Newman
  test:api-newman:
    desc: Run all API tests with Newman using local environment
    cmds:
      - task: test:api-newman-local

  test:api-newman-local:
    desc: Run API tests against local environment
    dir: postman
    cmds:
      - echo "Running API tests against local environment..."
      - newman run collections/public-api.postman_collection.json -e environments/local.postman_environment.json --reporters cli,json --reporter-json-export results/public-api-local.json
      - newman run collections/user-api.postman_collection.json -e environments/local.postman_environment.json --reporters cli,json --reporter-json-export results/user-api-local.json
      - newman run collections/auth-api.postman_collection.json -e environments/local.postman_environment.json --reporters cli,json --reporter-json-export results/auth-api-local.json
      - newman run collections/organisation-api.postman_collection.json -e environments/local.postman_environment.json --reporters cli,json --reporter-json-export results/organisation-api-local.json
      - newman run collections/therapist-api.postman_collection.json -e environments/local.postman_environment.json --reporters cli,json --reporter-json-export results/therapist-api-local.json

  test:api-newman-docker:
    desc: Run API tests against Docker environment
    dir: postman
    cmds:
      - echo "Running API tests against Docker environment..."
      - newman run collections/public-api.postman_collection.json -e environments/docker.postman_environment.json --reporters cli,json --reporter-json-export results/public-api-docker.json
      - newman run collections/user-api.postman_collection.json -e environments/docker.postman_environment.json --reporters cli,json --reporter-json-export results/user-api-docker.json
      - newman run collections/auth-api.postman_collection.json -e environments/docker.postman_environment.json --reporters cli,json --reporter-json-export results/auth-api-docker.json
      - newman run collections/organisation-api.postman_collection.json -e environments/docker.postman_environment.json --reporters cli,json --reporter-json-export results/organisation-api-docker.json
      - newman run collections/therapist-api.postman_collection.json -e environments/docker.postman_environment.json --reporters cli,json --reporter-json-export results/therapist-api-docker.json

  test:api-newman-ci:
    desc: Run API tests in CI environment
    dir: postman
    cmds:
      - echo "Running API tests in CI environment..."
      - newman run collections/public-api.postman_collection.json -e environments/ci.postman_environment.json --reporters cli,junit,json --reporter-junit-export results/public-api-ci.xml --reporter-json-export results/public-api-ci.json
      - newman run collections/user-api.postman_collection.json -e environments/ci.postman_environment.json --reporters cli,junit,json --reporter-junit-export results/user-api-ci.xml --reporter-json-export results/user-api-ci.json
      - newman run collections/auth-api.postman_collection.json -e environments/ci.postman_environment.json --reporters cli,junit,json --reporter-junit-export results/auth-api-ci.xml --reporter-json-export results/auth-api-ci.json
      - newman run collections/organisation-api.postman_collection.json -e environments/ci.postman_environment.json --reporters cli,junit,json --reporter-junit-export results/organisation-api-ci.xml --reporter-json-export results/organisation-api-ci.json
      - newman run collections/therapist-api.postman_collection.json -e environments/ci.postman_environment.json --reporters cli,junit,json --reporter-junit-export results/therapist-api-ci.xml --reporter-json-export results/therapist-api-ci.json

  test:api-newman-individual:
    desc: Run individual API collection tests (specify COLLECTION and ENV)
    dir: postman
    cmds:
      - |
        if [ -z "{{.COLLECTION}}" ] || [ -z "{{.ENV}}" ]; then
          echo "Usage: task test:api-newman-individual COLLECTION=<collection-name> ENV=<environment>"
          echo "Available collections: public-api, user-api, auth-api, organisation-api, therapist-api"
          echo "Available environments: local, docker, ci"
          exit 1
        fi
        newman run collections/{{.COLLECTION}}.postman_collection.json -e environments/{{.ENV}}.postman_environment.json --reporters cli,json --reporter-json-export results/{{.COLLECTION}}-{{.ENV}}.json

  test:api-newman-setup:
    desc: Setup Newman test results directory
    dir: postman
    cmds:
      - mkdir -p results
      - echo "Newman test results directory created"

  test:api-newman-clean:
    desc: Clean Newman test results
    dir: postman
    cmds:
      - rm -rf results
      - echo "Newman test results cleaned"

  test:api-newman-report:
    desc: Generate HTML report from Newman results
    dir: postman
    cmds:
      - |
        echo "Generating HTML reports from Newman JSON results..."
        for file in results/*.json; do
          if [ -f "$file" ]; then
            base=$(basename "$file" .json)
            echo "Generating report for $base"
            newman-reporter-html --source "$file" --folder results --filename "${base}-report.html" || echo "HTML reporter not available"
          fi
        done
