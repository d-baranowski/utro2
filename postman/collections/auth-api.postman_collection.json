{
  "info": {
    "name": "Utro Auth API",
    "description": "Authentication endpoints for Utro application",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    }
  ],
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set test timestamp for unique usernames",
          "pm.globals.set('timestamp', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test assertions",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response should not contain internal error details', function () {",
          "    const responseText = pm.response.text();",
          "    pm.expect(responseText).to.not.include('java.lang');",
          "    pm.expect(responseText).to.not.include('SQLException');",
          "    pm.expect(responseText).to.not.include('stackTrace');",
          "});"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Login (Form Data)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200 for valid credentials', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has token', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('token');",
              "    pm.expect(jsonData.token).to.be.a('string');",
              "    pm.expect(jsonData.token.length).to.be.greaterThan(0);",
              "    ",
              "    // Store token for subsequent requests",
              "    pm.environment.set('authToken', jsonData.token);",
              "});",
              "",
              "pm.test('Token is valid JWT format', function () {",
              "    const jsonData = pm.response.json();",
              "    const token = jsonData.token;",
              "    const parts = token.split('.');",
              "    pm.expect(parts).to.have.lengthOf(3);",
              "});"
            ]
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Create test user first",
              "const testUser = {",
              "    username: 'testuser_' + pm.globals.get('timestamp'),",
              "    password: 'testpassword123',",
              "    email: 'test@example.com'",
              "};",
              "",
              "pm.sendRequest({",
              "    url: pm.environment.get('baseUrl') + '/api/test/users',",
              "    method: 'POST',",
              "    header: {",
              "        'Content-Type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify(testUser)",
              "    }",
              "}, function (err, response) {",
              "    if (!err) {",
              "        pm.environment.set('testUsername', testUser.username);",
              "        pm.environment.set('testPassword', testUser.password);",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/x-www-form-urlencoded"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "username",
              "value": "{{testUsername}}",
              "type": "text"
            },
            {
              "key": "password",
              "value": "{{testPassword}}",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/login",
          "host": ["{{baseUrl}}"],
          "path": ["login"]
        }
      }
    },
    {
      "name": "Login (JSON)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200 for valid credentials', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has token', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('token');",
              "    pm.expect(jsonData.token).to.be.a('string');",
              "    pm.expect(jsonData.token.length).to.be.greaterThan(0);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"password\": \"{{testPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/login",
          "host": ["{{baseUrl}}"],
          "path": ["login"]
        }
      }
    },
    {
      "name": "Login (Connect RPC)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200 for valid credentials', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has token', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('token');",
              "    pm.expect(jsonData.token).to.be.a('string');",
              "    pm.expect(jsonData.token.length).to.be.greaterThan(0);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"password\": \"{{testPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/com.inspirationparticle.utro.gen.auth.v1.AuthService/Login",
          "host": ["{{baseUrl}}"],
          "path": ["com.inspirationparticle.utro.gen.auth.v1.AuthService", "Login"]
        }
      }
    },
    {
      "name": "Login with Invalid Credentials",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 401 for invalid credentials', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Response has error message', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.include('Invalid');",
              "});",
              "",
              "pm.test('No token in response', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.not.have.property('token');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"invaliduser\",\n  \"password\": \"invalidpassword\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/login",
          "host": ["{{baseUrl}}"],
          "path": ["login"]
        }
      }
    }
  ]
}